// üìÅ src/lib/auth.ts
import { NextRequest } from 'next/server';
import jwt from 'jsonwebtoken'; 

interface JWTPayload {
  userId: string;
  email: string;
  iat: number;
  exp: number;
}

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç userId –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ (JWT —Ç–æ–∫–µ–Ω, —Å–µ—Å—Å–∏—è –∏–ª–∏ –∞–Ω–æ–Ω–∏–º–Ω—ã–π ID)
 */
export async function getUserId(request: NextRequest): Promise<string> {
  try {
    // –°–ø–æ—Å–æ–± 1: JWT —Ç–æ–∫–µ–Ω –∏–∑ Authorization header
    const authHeader = request.headers.get('authorization');
    if (authHeader && authHeader.startsWith('Bearer ')) {
      const token = authHeader.replace('Bearer ', '');
      
      try {
        const decoded = jwt.verify(token, process.env.JWT_SECRET!) as JWTPayload;
        return decoded.userId;
      } catch (jwtError) {
        console.warn('Invalid JWT token:', jwtError);
      }
    }
    
    // –°–ø–æ—Å–æ–± 2: –°–µ—Å—Å–∏—è –∏–∑ cookies
    const sessionCookie = request.cookies.get('session_id');
    if (sessionCookie) {
      // –ó–¥–µ—Å—å –±—ã –±—ã–ª –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Å—Å–∏–∏
      // const session = await getSessionFromDB(sessionCookie.value);
      // if (session && session.userId) return session.userId;
      
      // –í—Ä–µ–º–µ–Ω–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π ID
      return `session_user_${sessionCookie.value.slice(0, 8)}`;
    }
    
    // –°–ø–æ—Å–æ–± 3: User ID –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞ (–¥–ª—è API testing)
    const { searchParams } = new URL(request.url);
    const userIdParam = searchParams.get('userId');
    if (userIdParam) {
      return userIdParam;
    }
    
    // –°–ø–æ—Å–æ–± 4: –ê–Ω–æ–Ω–∏–º–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (—Å–æ–∑–¥–∞–µ–º —Å—Ç–∞–±–∏–ª—å–Ω—ã–π ID)
    return generateAnonymousUserId(request);
    
  } catch (error) {
    console.error('Error getting user ID:', error);
    return generateAnonymousUserId(request);
  }
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –∞–Ω–æ–Ω–∏–º–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
function generateAnonymousUserId(request: NextRequest): string {
  const userAgent = request.headers.get('user-agent') || '';
  const forwarded = request.headers.get('x-forwarded-for') || 
                   request.headers.get('x-real-ip') || 
                   'unknown';
  
  // –°–æ–∑–¥–∞–µ–º —Å—Ç–∞–±–∏–ª—å–Ω—ã–π hash –Ω–∞ –æ—Å–Ω–æ–≤–µ User-Agent –∏ IP
  const fingerprint = `${userAgent}-${forwarded}`;
  const hash = btoa(fingerprint).replace(/[+/=]/g, '').slice(0, 12);
  
  return `anon_${hash}`;
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
 */
export async function isAuthenticated(request: NextRequest): Promise<boolean> {
  try {
    const authHeader = request.headers.get('authorization');
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
      return false;
    }
    
    const token = authHeader.replace('Bearer ', '');
    jwt.verify(token, process.env.JWT_SECRET!);
    return true;
    
  } catch {
    return false;
  }
}

/**
 * Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
 */
export async function requireAuth(request: NextRequest): Promise<string | null> {
  if (!(await isAuthenticated(request))) {
    return null;
  }
  
  return getUserId(request);
}

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ —Ç–æ–∫–µ–Ω–∞
 */
export async function getUserInfo(request: NextRequest): Promise<JWTPayload | null> {
  try {
    const authHeader = request.headers.get('authorization');
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
      return null;
    }
    
    const token = authHeader.replace('Bearer ', '');
    const decoded = jwt.verify(token, process.env.JWT_SECRET!) as JWTPayload;
    return decoded;
    
  } catch {
    return null;
  }
}

// üìÅ src/lib/api-client.ts
/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–Ω–µ—à–Ω–∏–º API
 */

interface ApiOptions {
  method?: 'GET' | 'POST' | 'PUT' | 'DELETE';
  body?: any;
  headers?: Record<string, string>;
  cache?: RequestCache;
}

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –≤–Ω–µ—à–Ω–µ–º—É API
 */
export async function apiRequest(endpoint: string, options: ApiOptions = {}) {
  const {
    method = 'GET',
    body,
    headers = {},
    cache = 'no-store',
  } = options;
  
  const url = `${process.env.API_BASE_URL}${endpoint}`;
  
  const requestOptions: RequestInit = {
    method,
    cache,
    headers: {
      'Authorization': `Bearer ${process.env.API_TOKEN}`,
      'Content-Type': 'application/json',
      ...headers,
    },
  };
  
  if (body && method !== 'GET') {
    requestOptions.body = JSON.stringify(body);
  }
  
  const response = await fetch(url, requestOptions);
  
  if (!response.ok) {
    throw new Error(`API Error: ${response.status} - ${response.statusText}`);
  }
  
  return response.json();
}

/**
 * –¢–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫ API
 */
export const api = {
  products: {
    getAll: (params?: Record<string, string>) => {
      const query = params ? `?${new URLSearchParams(params)}` : '';
      return apiRequest(`/products${query}`);
    },
    getById: (id: string) => apiRequest(`/products/${id}`),
    search: (query: string, filters?: Record<string, string>) => {
      const params = new URLSearchParams({ q: query, ...filters });
      return apiRequest(`/search?${params}`);
    },
  },
  
  categories: {
    getAll: () => apiRequest('/categories'),
    getById: (id: string) => apiRequest(`/categories/${id}`),
  },
  
  cart: {
    get: (userId: string) => apiRequest(`/cart/${userId}`),
    add: (userId: string, item: any) => apiRequest('/cart', {
      method: 'POST',
      body: { ...item, userId },
    }),
    update: (itemId: string, data: any) => apiRequest(`/cart/${itemId}`, {
      method: 'PUT',
      body: data,
    }),
    remove: (itemId: string, userId: string) => apiRequest(`/cart/${itemId}?userId=${userId}`, {
      method: 'DELETE',
    }),
  },
  
  favorites: {
    get: (userId: string) => apiRequest(`/favorites/${userId}`),
    add: (userId: string, item: any) => apiRequest('/favorites', {
      method: 'POST',
      body: { ...item, userId },
    }),
    remove: (userId: string, productSlug: string, colorId?: string) => {
      const query = colorId ? `?colorId=${colorId}` : '';
      return apiRequest(`/favorites/${userId}/${productSlug}${query}`, {
        method: 'DELETE',
      });
    },
  },
};