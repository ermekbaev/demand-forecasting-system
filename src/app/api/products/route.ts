// üìÅ src/app/api/products/route.ts
import { NextRequest } from 'next/server';
import { 
  fetchProducts, 
  searchProducts, 
  fetchModels, 
  getFullImageUrl, 
  type Product 
} from '../../../services/api';
import { formatApiProduct } from '../../../utils/apiHelpers';

export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url);
    const limit = parseInt(searchParams.get('limit') || '25');
    const featured = searchParams.get('featured');
    const category = searchParams.get('category');
    const brand = searchParams.get('brand');
    const search = searchParams.get('q');
    const minPrice = searchParams.get('minPrice');
    const maxPrice = searchParams.get('maxPrice');
    
    // console.log('üöÄ Products API route - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞:', {
    //   limit, featured, category, brand, search, minPrice, maxPrice
    // });
    
    let products: Product[] = [];
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º searchProducts
    if (search || category || brand || minPrice || maxPrice) {
      const filters = {
        categories: category ? [category] : undefined,
        brands: brand ? [brand] : undefined,
        minPrice: minPrice ? parseInt(minPrice) : undefined,
        maxPrice: maxPrice ? parseInt(maxPrice) : undefined,
      };
      
      // console.log('üîç –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–∏—Å–∫ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏:', filters);
      products = await searchProducts(search || '', filters);
    } else {
      // –ò–Ω–∞—á–µ –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã
      // console.log('üì¶ –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã');
      products = await fetchProducts();
    }
    
    // console.log(`üìä –ü–æ–ª—É—á–µ–Ω–æ ${products.length} –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑ API`);
    
    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è featured —Ç–æ–≤–∞—Ä–æ–≤
    if (featured === 'true') {
      // console.log('‚≠ê –§–∏–ª—å—Ç—Ä—É–µ–º featured —Ç–æ–≤–∞—Ä—ã');
      products = products.filter(product => 
        product.Price > 5000 || // –¥–æ—Ä–æ–≥–∏–µ —Ç–æ–≤–∞—Ä—ã
        product.Name.toLowerCase().includes('nike') || // –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –±—Ä–µ–Ω–¥—ã
        product.Name.toLowerCase().includes('adidas')
      );
      // console.log(`‚≠ê –û—Å—Ç–∞–ª–æ—Å—å ${products.length} featured —Ç–æ–≤–∞—Ä–æ–≤`);
    }
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    const limitedProducts = products.slice(0, limit);
    console.log(`üìè –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ ${limit}, –∏—Ç–æ–≥–æ: ${limitedProducts.length}`);
    
    // ‚úÖ –ò–°–ü–û–õ–¨–ó–£–ï–ú formatApiProduct –ö–ê–ö –í test-api
    // console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å formatApiProduct...');
    
    const transformedProducts = await Promise.all(
      limitedProducts.map(async (product, index) => {
        // console.log(`üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç ${index + 1}/${limitedProducts.length}: ${product.Name}`);
        
        try {
          // ‚úÖ –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ–ª–∏ –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ (–ö–ê–ö –í test-api)
          const models = await fetchModels(product.slug);
          // console.log(`üé® –î–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ ${product.slug} –Ω–∞–π–¥–µ–Ω–æ ${models.length} –º–æ–¥–µ–ª–µ–π`);
          
          // ‚úÖ –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø—Ä–æ–¥—É–∫—Ç —Å –º–æ–¥–µ–ª—è–º–∏ (–ö–ê–ö –í test-api)
          const formatted = await formatApiProduct(product, models);
          // console.log(`‚úÖ –ü—Ä–æ–¥—É–∫—Ç ${product.slug} –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω`);
          
          // ‚úÖ –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
          const result = {
            slug: formatted.slug,
            Name: formatted.Name,
            brandName: formatted.brandName,
            Price: formatted.Price,
            imageUrl: formatted.imageUrl, // ‚úÖ –¢–µ–ø–µ—Ä—å –±—É–¥–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            colors: formatted.colors, // ‚úÖ –¢–µ–ø–µ—Ä—å –±—É–¥—É—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ü–≤–µ—Ç–∞
            sizes: formatted.sizes, // ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
            genders: formatted.genders,
            categoryName: formatted.categoryNames[0] || product.category?.Name || null,
            description: formatted.Description,
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è UI
            originalPrice: undefined,
            isNew: false,
            isSale: false,
            rating: 4.0 + Math.random(),
          };
          
          // console.log(`üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞:`, {
          //   slug: result.slug,
          //   imageUrl: result.imageUrl,
          //   colorsCount: result.colors.length,
          //   sizesCount: result.sizes.length,
          //   hasRealImage: !result.imageUrl.includes('placehold')
          // });
          
          return result;
          
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ ${product.slug}:`, error);
          
          // ‚úÖ Fallback –≤–µ—Ä—Å–∏—è (—Å—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞) –µ—Å–ª–∏ formatApiProduct –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª
          const fallback = {
            slug: product.slug,
            Name: product.Name,
            brandName: product.brand?.Brand_Name || 'Unknown',
            Price: product.Price,
            imageUrl: getFullImageUrl(product.Image?.url),
            colors: product.colors?.map(color => color.Name).filter(Boolean) || ['–ß–µ—Ä–Ω—ã–π'], // –î–µ—Ñ–æ–ª—Ç–Ω—ã–π —Ü–≤–µ—Ç
            sizes: product.sizes?.map(size => size.Size) || [42], // –î–µ—Ñ–æ–ª—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä
            genders: product.genders?.map(gender => gender.Geander_Name).filter(Boolean) || [],
            categoryName: product.category?.Name || null,
            description: product.Description || '',
            originalPrice: undefined,
            isNew: false,
            isSale: false,
            rating: 4.0 + Math.random(),
          };
          
          // console.log(`‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ ${product.slug}`);
          return fallback;
        }
      })
    );
    
    // console.log('‚úÖ –í—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –≤ API route');
    // console.log('üîç –ü–µ—Ä–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:', {
    //   slug: transformedProducts[0]?.slug,
    //   imageUrl: transformedProducts[0]?.imageUrl,
    //   colorsCount: transformedProducts[0]?.colors?.length,
    //   sizesCount: transformedProducts[0]?.sizes?.length,
    //   hasRealImage: transformedProducts[0]?.imageUrl && !transformedProducts[0].imageUrl.includes('placehold')
    // });
    
    return Response.json({
      products: transformedProducts,
      total: products.length,
      page: 1,
      limit,
    });
    
  } catch (error) {
    console.error('‚ùå Products API Error:', error);
    return Response.json(
      { 
        error: 'Failed to fetch products',
        details: error instanceof Error ? error.message : 'Unknown error'
      },
      { status: 500 }
    );
  }
}