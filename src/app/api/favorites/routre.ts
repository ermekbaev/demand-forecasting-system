// üìÅ src/app/api/favorites/route.ts
import { NextRequest } from 'next/server';

// –í—Ä–µ–º–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è userId (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à—É –ª–æ–≥–∏–∫—É)
async function getUserId(request: NextRequest): Promise<string> {
  // –í–∞—Ä–∏–∞–Ω—Ç 1: –ò–∑ header Authorization
  const authHeader = request.headers.get('authorization');
  if (authHeader) {
    // –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º userId
    const token = authHeader.replace('Bearer ', '');
    // TODO: –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å JWT —Ç–æ–∫–µ–Ω
    return 'user_123'; // –í—Ä–µ–º–µ–Ω–Ω–æ
  }
  
  // –í–∞—Ä–∏–∞–Ω—Ç 2: –ò–∑ cookies (—Å–µ—Å—Å–∏—è)
  const sessionCookie = request.cookies.get('session');
  if (sessionCookie) {
    // TODO: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ—Å—Å–∏—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    return 'user_123'; // –í—Ä–µ–º–µ–Ω–Ω–æ
  }
  
  // –í–∞—Ä–∏–∞–Ω—Ç 3: –ê–Ω–æ–Ω–∏–º–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–ø–æ IP –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–π ID)
  const userAgent = request.headers.get('user-agent') || '';
  const forwarded = request.headers.get('x-forwarded-for') || '';
  return `anon_${btoa(userAgent + forwarded).slice(0, 10)}`;
}

export async function GET(request: NextRequest) {
  try {
    const userId = await getUserId(request);
    
    const response = await fetch(
      `${process.env.API_BASE_URL}/favorites/${userId}`,
      {
        headers: {
          'Authorization': `Bearer ${process.env.API_TOKEN}`,
          'Content-Type': 'application/json',
        },
        cache: 'no-store',
      }
    );
    
    if (!response.ok) {
      throw new Error(`API Error: ${response.status}`);
    }
    
    const data = await response.json();
    return Response.json(data);
    
  } catch (error) {
    console.error('Favorites GET Error:', error);
    return Response.json(
      { error: 'Failed to fetch favorites' },
      { status: 500 }
    );
  }
}

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const userId = await getUserId(request);
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥—è—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!body.productSlug) {
      return Response.json(
        { error: 'productSlug is required' },
        { status: 400 }
      );
    }
    
    const response = await fetch(
      `${process.env.API_BASE_URL}/favorites`,
      {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${process.env.API_TOKEN}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          ...body,
          userId,
        }),
      }
    );
    
    if (!response.ok) {
      throw new Error(`API Error: ${response.status}`);
    }
    
    const data = await response.json();
    return Response.json(data);
    
  } catch (error) {
    console.error('Favorites POST Error:', error);
    return Response.json(
      { error: 'Failed to toggle favorite' },
      { status: 500 }
    );
  }
}

export async function DELETE(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url);
    const productSlug = searchParams.get('productSlug');
    const colorId = searchParams.get('colorId');
    const userId = await getUserId(request);
    
    if (!productSlug) {
      return Response.json(
        { error: 'productSlug is required' },
        { status: 400 }
      );
    }
    
    const response = await fetch(
      `${process.env.API_BASE_URL}/favorites/${userId}/${productSlug}${colorId ? `?colorId=${colorId}` : ''}`,
      {
        method: 'DELETE',
        headers: {
          'Authorization': `Bearer ${process.env.API_TOKEN}`,
          'Content-Type': 'application/json',
        },
      }
    );
    
    if (!response.ok) {
      throw new Error(`API Error: ${response.status}`);
    }
    
    const data = await response.json();
    return Response.json(data);
    
  } catch (error) {
    console.error('Favorites DELETE Error:', error);
    return Response.json(
      { error: 'Failed to remove favorite' },
      { status: 500 }
    );
  }
}